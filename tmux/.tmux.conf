#------------------------------------------------------------------------------
# File:   $HOME/.tmux.conf
# Author: Petr Zemek <s3rvac@petrzemek.net>
#------------------------------------------------------------------------------

# Rebind the prefix from C-b to C-Space.
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

#------------------------------------------------------------------------------
# Settings.
#------------------------------------------------------------------------------

# Support 256 colors in the terminal emulator.
set -g default-terminal "tmux-256color"

# Enable RGB capability to support true colors in Neovim.
set -sa terminal-features ',xterm*:RGB'
set -ga terminal-overrides ',xterm*:Tc'
set -sa terminal-features ',alacritty*:RGB'
set -ga terminal-overrides ',alacritty*:Tc'

# Enable undercurl support (curly waves under letters, e.g. for spell checking
# in Vim). Requires a terminal emulator supporting undercurl. To see whether it
# works, run `printf "\e[4:3mhello world\e[0m\n"`.
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# Enable terminal-emulator scrolling.
set -ga terminal-overrides ",xterm*:smcup@:rmcup@"
set -ga terminal-overrides ",alacritty*:smcup@:rmcup@"

# Disable the delay between an escape key press and subsequent characters.
# This increases Vim responsiveness.
set -sg escape-time 0

# Set the base index for windows to 1 instead of 0.
set -g base-index 1

# Set the base index for panes to 1 instead of 0.
setw -g pane-base-index 1

# Scrollback limit.
set -g history-limit 10000

# Pass xterm-style keys to make key combinations work as expected.
setw -g xterm-keys on

# Disable mouse in tmux. This makes tmux pass control directly to the used
# terminal emulator, so I can copy&paste as if I am not using tmux.
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2 | tr -d a-z) < 2.1" | bc) -eq 1 ]' \
	"setw -g mode-mouse off" \
	"setw -g mouse off"

# Monitor window activity. Windows with activity are then highlighted in the
# status line.
setw -g monitor-activity on

# Prevent tmux from displaying "Activity in window X" messages.
set -g visual-activity off

# Enable vi keys.
set -g status-keys vi
setw -g mode-keys vi

# Enable utf-8. Only available in tmux < v2.2.
setw -gq utf8 on
set -gq status-utf8 on

# Enable setting of terminal-emulator titles.
set -g set-titles on
set -g set-titles-string "#h"

# Automatically re-number windows after one of them is closed.
set -g renumber-windows on

# Request focus events from the terminal and pass them through to applications.
# This fixes e.g. autoread in Neovim.
set -g focus-events on

#------------------------------------------------------------------------------
# Key Bindings.
#------------------------------------------------------------------------------

# Smart pane switching with awareness of Vim splits. Now, I can use Ctrl+hjkl
# in both Vim and Tmux (without using the prefix). Based on
# http://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits.
# Note: I do not use https://github.com/christoomey/vim-tmux-navigator because
#       it does not work when vim is run over ssh.
# Note: The "... || true" part is there to prevent annoying messages when there
#       is no pane to switch into.
bind -n C-h run "(tmux display-message -p '#{pane_title}' | grep -q '\\(- VIM$\\|^vim$\\|- NVIM$\\|- Nvim$\\|^nvim$\\)' && tmux send-keys C-h) || (tmux select-pane -L || true)"
bind -n C-j run "(tmux display-message -p '#{pane_title}' | grep -q '\\(- VIM$\\|^vim$\\|- NVIM$\\|- Nvim$\\|^nvim$\\)' && tmux send-keys C-j) || (tmux select-pane -D || true)"
bind -n C-k run "(tmux display-message -p '#{pane_title}' | grep -q '\\(- VIM$\\|^vim$\\|- NVIM$\\|- Nvim$\\|^nvim$\\)' && tmux send-keys C-k) || (tmux select-pane -U || true)"
bind -n C-l run "(tmux display-message -p '#{pane_title}' | grep -q '\\(- VIM$\\|^vim$\\|- NVIM$\\|- Nvim$\\|^nvim$\\)' && tmux send-keys C-l) || (tmux select-pane -R || true)"
# Since tmux 2.6, the following two bindings have to be also set from the copy
# mode. Otherwise, they will not work in the copy mode.
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2 | tr -d a-z) >= 2.6" | bc) -eq 1 ]' \
	"bind -T copy-mode-vi C-h select-pane -L" ""
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2 | tr -d a-z) >= 2.6" | bc) -eq 1 ]' \
	"bind -T copy-mode-vi C-j select-pane -D" ""

# Occasionally, it may happen that the above smart-pane-switching keys do not
# work. In such a case, the following bindings allow me to force pane switching
# by using Ctrl+hjkl with prefix.
bind C-h select-pane -L
bind C-j select-pane -D
bind C-k select-pane -U
bind C-l select-pane -R

# Pane resizing.
bind -r M-h resize-pane -L 5
bind -r M-j resize-pane -D 5
bind -r M-k resize-pane -U 5
bind -r M-l resize-pane -R 5

# Pane splitting.
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Movement of windows.
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2 | tr -d a-z) >= 3.0" | bc) -eq 1 ]' \
	"bind -r < swap-window -t -1 -d" \
	"bind -r < swap-window -t -1"
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2 | tr -d a-z) >= 3.0" | bc) -eq 1 ]' \
	"bind -r > swap-window -t +1 -d" \
	"bind -r > swap-window -t +1"

# Clear all panes in the current window.
# Note: The spaces before 'for' and 'clear' prevent the shell from saving these
#       commands into history.
bind C-c send-keys " for pane in \$(tmux list-panes -F '#P'); do tmux send-keys -t \$pane ' clear' Enter; done" Enter

# Create a new window starting in the current working directory rather than in
# the default directory.
bind C new-window -c "#{pane_current_path}"

# Make the prefix and 0 go to window number 10 (I use window numbering starting
# from 1).
bind 0 select-window -t :10

# Do not display the original window's name when renaming it. This makes
# renaming faster since one does not need to first erase the original name.
bind , command-prompt -p "(rename-window '#W')" "rename-window '%%'"

# Do the same for sessions.
bind '$' command-prompt -p "(rename-session '#S')" "rename-session '%%'"

# Make the prefix and f select the given window. Use select-window instead of
# find-window (the default) as the behavior of find-window has changed in tmux
# 2.6. More specifically, when searching using find-window -N '%%' and there is
# only one window that matches, tmux 2.6 shows a tree view. The previous
# behavior was switching to the one matching window without showing the tree
# (https://github.com/tmux/tmux/issues/1129).
bind f command-prompt -p "(select-window)" "select-window -t '%%'"

# Clear activity flags from all windows in the current session.
# Based on http://stackoverflow.com/a/12670429/2580955.
# Note: The 'tmux-select-each' script has to be available in $PATH.
bind Space run-shell "tmux-select-each '#S'"

# Configuration file reload.
bind R source-file ~/.tmux.conf \; display "Configuration reloaded."

# Toggle pane synchronization.
bind S set synchronize-panes

# Make b start copy mode.
bind b copy-mode

# Make Ctrl+b start copy mode and scroll one page up (just like PgUp does).
bind C-b copy-mode -u

# Make copy mode behave more like Vim.
# Moreover, make 'y' copy also to the system clipboard.
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2 | tr -d a-z) < 2.4" | bc) -eq 1 ]' \
	"bind -t vi-copy v begin-selection" \
	"bind -T copy-mode-vi v send -X begin-selection"
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2 | tr -d a-z) < 2.4" | bc) -eq 1 ]' \
	"bind -t vi-copy C-v rectangle-toggle" \
	"bind -T copy-mode-vi C-v send -X rectangle-toggle"
# The redirection to /dev/null is there to prevent freezing because xclip does
# not close STDOUT after it has read from the tmux buffer (see
# https://wiki.archlinux.org/index.php/Tmux#X_clipboard_integration).
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2 | tr -d a-z) < 2.4" | bc) -eq 1 ]' \
	"bind -t vi-copy y copy-pipe 'xclip -filter -selection clipboard | xclip -selection primary > /dev/null'" \
	"bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -filter -selection clipboard | xclip -selection primary > /dev/null'"

#------------------------------------------------------------------------------
# Styling.
#------------------------------------------------------------------------------

# Status line.
set -g status-style fg=white,bg=black
set -g status-left ""
set -g status-right "#{?pane_synchronized, #[bg=blue]SYNCHRONIZED#[default],} #S "

# Window list.
setw -g window-status-format "#{?window_activity_flag,#[fg=black#,bg=colour172],#[fg=colour172#,bg=black]}#I#{?window_activity_flag,#[fg=black#,bg=colour249],#[fg=colour249#,bg=black]} #W "

# Active window.
setw -g window-status-current-format "#[fg=colour172#,bg=black#,bright]#I#[fg=white#,bg=black#,bright] #W#F"

# Window activity.
setw -g window-status-activity-style fg=black,bg=colour249,none

# Panes.
set -g pane-border-style fg=white,bg=black
set -g pane-active-border-style fg=green,bg=black

# Command/message line.
set -g message-style fg=white,bg=black,bright

# Status update interval.
set -g status-interval 60

# Make the window list appear at the left-hand side instead of at the center.
set -g status-justify left

#------------------------------------------------------------------------------
# Plugins.
#------------------------------------------------------------------------------

# https://github.com/tmux-plugins/tmux-copycat
# I have to use Alt-s for SHA-1 searches because I use Alt-h (the default) to
# resize the current pane.
set -g @copycat_hash_search "M-s"
# Make Ctrl-p search for the last occurrence of a prompt. See my .bashrc for a
# description of the prompt format.
set -g @copycat_search_C-p "[0-9]+:[0-9]+ .*@.* \\\$ "
run-shell ~/.tmux/plugins/tmux-copycat/copycat.tmux

# https://github.com/tmux-plugins/tmux-open
run-shell ~/.tmux/plugins/tmux-open/open.tmux
